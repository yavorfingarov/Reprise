{
  target: {
    requestScopeIdentifier: {
      ScopeId: Guid_1
    },
    Handlers: [
      {
        ServiceScopeId: Guid_2,
        HandlerId: MockAsyncEventHandler-1,
        HandlerStatus: Faulted,
        IsDisposed: true
      },
      {
        ServiceScopeId: Guid_2,
        HandlerId: MockAsyncEventHandler-2,
        HandlerStatus: Done,
        IsDisposed: true
      },
      {
        ServiceScopeId: Guid_2,
        HandlerId: MockSyncEventHandler-3,
        HandlerStatus: Done,
        IsDisposed: true
      },
      {
        ServiceScopeId: Guid_2,
        HandlerId: MockSyncEventHandler-4,
        HandlerStatus: Faulted,
        IsDisposed: true
      }
    ]
  },
  logs: [
    {
      Error: An exception was thrown while executing Reprise.UnitTests.Features.Events.MockAsyncEventHandler.,
      Category: EventBus,
      State: [
        {
          EventHandlerType: Reprise.UnitTests.Features.Events.MockAsyncEventHandler
        },
        {
          {OriginalFormat}: An exception was thrown while executing {EventHandlerType}.
        }
      ],
      Exception: {
        Type: Exception,
        Message: [MockAsyncEventHandler-1] Test message
      }
    },
    {
      Error: An exception was thrown while executing Reprise.UnitTests.Features.Events.MockSyncEventHandler.,
      Category: EventBus,
      State: [
        {
          EventHandlerType: Reprise.UnitTests.Features.Events.MockSyncEventHandler
        },
        {
          {OriginalFormat}: An exception was thrown while executing {EventHandlerType}.
        }
      ],
      Exception: {
        Type: Exception,
        Message: [MockSyncEventHandler-4] Test message
      }
    }
  ]
}