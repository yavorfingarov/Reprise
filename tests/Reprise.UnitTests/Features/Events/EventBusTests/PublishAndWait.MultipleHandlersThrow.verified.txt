{
  target: {
    RequestScopeIdentifier: {
      ScopeId: Guid_1
    },
    EventHandlers: [
      {
        ServiceScopeId: Guid_1,
        WorkerStatus: Faulted,
        IsDisposed: false
      },
      {
        ServiceScopeId: Guid_1,
        WorkerStatus: Faulted,
        IsDisposed: false
      },
      {
        ServiceScopeId: Guid_1,
        WorkerStatus: Done,
        IsDisposed: false
      },
      {
        ServiceScopeId: Guid_1,
        WorkerStatus: Done,
        IsDisposed: false
      }
    ],
    MockTaskRunner: [
      {
        Method: TaskRunner.WhenAll(IEnumerable<Func<Task>> tasks),
        Arguments: [
          [
            {
              Type: Func<Task>,
              Target: EventBus.<>c__DisplayClass7_1,
              Method: System.Threading.Tasks.Task PublishAndWait()
            },
            {
              Type: Func<Task>,
              Target: EventBus.<>c__DisplayClass7_1,
              Method: System.Threading.Tasks.Task PublishAndWait()
            },
            {
              Type: Func<Task>,
              Target: EventBus.<>c__DisplayClass7_1,
              Method: System.Threading.Tasks.Task PublishAndWait()
            },
            {
              Type: Func<Task>,
              Target: EventBus.<>c__DisplayClass7_1,
              Method: System.Threading.Tasks.Task PublishAndWait()
            }
          ]
        ],
        ReturnValue: {
          Status: Faulted,
          Exception: {
            Type: AggregateException,
            InnerException: {
              Type: AggregateException,
              InnerExceptions: [
                {
                  Type: Exception,
                  Message: Test message
                },
                {
                  Type: Exception,
                  Message: Test message
                }
              ]
            }
          }
        }
      }
    ],
    exception: {
      Type: AggregateException,
      InnerExceptions: [
        {
          Type: Exception,
          Message: Test message
        },
        {
          Type: Exception,
          Message: Test message
        }
      ]
    }
  },
  logs: []
}